
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "V28",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "TPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Atharva9190/Data-Analytics-Data-Mining/blob/main/DA_DM.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wxriXj74KDSD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a1251a60-c60d-406e-ef4e-ae9c7cca9d88"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install imbalanced-learn\n",
        "!pip install xgboost\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2k49h6mJHw2g",
        "outputId": "6f954fac-56a7-4a3d-b812-de34c749ccc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting imbalanced-learn\n",
            "  Downloading imbalanced_learn-0.13.0-py3-none-any.whl.metadata (8.8 kB)\n",
            "Requirement already satisfied: numpy<3,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (2.0.2)\n",
            "Requirement already satisfied: scipy<2,>=1.10.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.14.1)\n",
            "Requirement already satisfied: scikit-learn<2,>=1.3.2 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.6.1)\n",
            "Collecting sklearn-compat<1,>=0.1 (from imbalanced-learn)\n",
            "  Downloading sklearn_compat-0.1.3-py3-none-any.whl.metadata (18 kB)\n",
            "Requirement already satisfied: joblib<2,>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl<4,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (3.6.0)\n",
            "Downloading imbalanced_learn-0.13.0-py3-none-any.whl (238 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m238.4/238.4 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading sklearn_compat-0.1.3-py3-none-any.whl (18 kB)\n",
            "Installing collected packages: sklearn-compat, imbalanced-learn\n",
            "Successfully installed imbalanced-learn-0.13.0 sklearn-compat-0.1.3\n",
            "Collecting xgboost\n",
            "  Downloading xgboost-3.0.0-py3-none-manylinux_2_28_x86_64.whl.metadata (2.1 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.0.2)\n",
            "Collecting nvidia-nccl-cu12 (from xgboost)\n",
            "  Downloading nvidia_nccl_cu12-2.26.2.post1-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (2.0 kB)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from xgboost) (1.14.1)\n",
            "Downloading xgboost-3.0.0-py3-none-manylinux_2_28_x86_64.whl (253.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m253.9/253.9 MB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading nvidia_nccl_cu12-2.26.2.post1-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (291.7 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m291.7/291.7 MB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: nvidia-nccl-cu12, xgboost\n",
            "Successfully installed nvidia-nccl-cu12-2.26.2.post1 xgboost-3.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from xgboost import XGBClassifier\n",
        "from imblearn.over_sampling import SMOTE, ADASYN\n",
        "from imblearn.under_sampling import RandomUnderSampler\n",
        "from google.colab import files\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "metadata": {
        "id": "TaGMuQYIqdHR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "loan_accept = \"/content/drive/My Drive/Data Mining & Data Analytics/Dataset/accepted_2007_to_2018Q4.csv\"\n",
        "df_1 = pd.read_csv(loan_accept)\n"
      ],
      "metadata": {
        "id": "j8nu-I4h-PMX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_drop = [\n",
        "    # Unnecessary Identifiers & Descriptive Fields\n",
        "    \"funded_amnt_inv\", \"grade\", \"sub_grade\", \"emp_title\", \"issue_d\", \"pymnt_plan\", \"url\", \"desc\", \"purpose\", \"title\",\n",
        "    \"zip_code\", \"addr_state\",\n",
        "\n",
        "    # Credit History & Financial Information that is unnecessary\n",
        "    \"earliest_cr_line\", \"mths_since_last_delinq\",\n",
        "    \"mths_since_last_record\", \"term\", \"revol_util\", \"initial_list_status\",\n",
        "\n",
        "    # Loan Payment & Recovery Details (Post-Loan Information)\n",
        "    \"out_prncp\", \"out_prncp_inv\", \"total_pymnt\", \"total_pymnt_inv\", \"total_rec_prncp\", \"total_rec_int\",\n",
        "    \"total_rec_late_fee\", \"recoveries\", \"collection_recovery_fee\", \"last_pymnt_d\", \"last_pymnt_amnt\",\n",
        "    \"next_pymnt_d\", \"last_credit_pull_d\", \"last_fico_range_high\", \"last_fico_range_low\",\n",
        "\n",
        "    # Policy, Application, and Verification Details\n",
        "    \"collections_12_mths_ex_med\", \"mths_since_last_major_derog\", \"policy_code\", \"application_type\",\n",
        "    \"annual_inc_joint\", \"dti_joint\", \"verification_status_joint\", \"acc_now_delinq\",\n",
        "\n",
        "    # Derived Credit Information That May Not Be Required\n",
        "    \"tot_coll_amt\", \"tot_cur_bal\", \"open_acc_6m\", \"open_act_il\", \"open_il_12m\", \"open_il_24m\", \"mths_since_rcnt_il\",\n",
        "    \"total_bal_il\", \"il_util\", \"open_rv_12m\", \"open_rv_24m\", \"max_bal_bc\", \"all_util\", \"total_rev_hi_lim\", \"inq_fi\",\n",
        "    \"total_cu_tl\", \"inq_last_12m\", \"acc_open_past_24mths\", \"avg_cur_bal\", \"bc_open_to_buy\", \"bc_util\",\n",
        "\n",
        "    # Delinquency & Charge-Off Details\n",
        "    \"chargeoff_within_12_mths\", \"delinq_amnt\", \"mo_sin_old_il_acct\", \"mo_sin_old_rev_tl_op\", \"mo_sin_rcnt_rev_tl_op\",\n",
        "    \"mo_sin_rcnt_tl\", \"mort_acc\", \"mths_since_recent_bc\", \"mths_since_recent_bc_dlq\", \"mths_since_recent_inq\",\n",
        "    \"mths_since_recent_revol_delinq\", \"num_accts_ever_120_pd\", \"num_actv_bc_tl\", \"num_actv_rev_tl\", \"num_bc_sats\",\n",
        "    \"num_bc_tl\", \"num_il_tl\", \"num_op_rev_tl\", \"num_rev_accts\", \"num_rev_tl_bal_gt_0\", \"num_sats\",\n",
        "    \"num_tl_120dpd_2m\", \"num_tl_30dpd\", \"num_tl_90g_dpd_24m\", \"num_tl_op_past_12m\", \"pct_tl_nvr_dlq\",\n",
        "    \"percent_bc_gt_75\", \"pub_rec_bankruptcies\", \"tax_liens\", \"tot_hi_cred_lim\", \"total_bal_ex_mort\",\n",
        "    \"total_bc_limit\", \"total_il_high_credit_limit\",\n",
        "\n",
        "    # Secondary Applicant Information\n",
        "    \"revol_bal_joint\", \"sec_app_fico_range_low\", \"sec_app_fico_range_high\", \"sec_app_earliest_cr_line\",\n",
        "    \"sec_app_inq_last_6mths\", \"sec_app_mort_acc\", \"sec_app_open_acc\", \"sec_app_revol_util\", \"sec_app_open_act_il\",\n",
        "    \"sec_app_num_rev_accts\", \"sec_app_chargeoff_within_12_mths\", \"sec_app_collections_12_mths_ex_med\",\n",
        "    \"sec_app_mths_since_last_major_derog\", \"member_id\",\n",
        "\n",
        "    # Hardship & Settlement Details\n",
        "    \"hardship_flag\", \"hardship_type\", \"hardship_reason\", \"hardship_status\", \"deferral_term\", \"hardship_amount\",\n",
        "    \"hardship_start_date\", \"hardship_end_date\", \"payment_plan_start_date\", \"hardship_length\", \"hardship_dpd\",\n",
        "    \"hardship_loan_status\", \"orig_projected_additional_accrued_interest\", \"hardship_payoff_balance_amount\",\n",
        "    \"hardship_last_payment_amount\", \"disbursement_method\", \"debt_settlement_flag\", \"debt_settlement_flag_date\",\n",
        "    \"settlement_status\", \"settlement_date\", \"settlement_amount\", \"settlement_percentage\", \"settlement_term\"\n",
        "]\n",
        "\n"
      ],
      "metadata": {
        "id": "-Y8QnbL31gri"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned = df_1.drop(columns=columns_to_drop, errors='ignore')\n",
        "\n",
        "df_cleaned = df_cleaned.head(200000)\n",
        "\n",
        "# Display descriptive statistics\n",
        "print(df_cleaned.describe(include='all'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Esh2kj7YPcr",
        "outputId": "d27f54a5-a8af-4094-9659-87baaba02204"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                id      loan_amnt    funded_amnt       int_rate   installment  \\\n",
            "count     200000.0  200000.000000  200000.000000  200000.000000  200000.00000   \n",
            "unique    200000.0            NaN            NaN            NaN           NaN   \n",
            "top     56010150.0            NaN            NaN            NaN           NaN   \n",
            "freq           1.0            NaN            NaN            NaN           NaN   \n",
            "mean           NaN   15278.155750   15278.155750      12.361763     441.38414   \n",
            "std            NaN    8651.134393    8651.134393       4.242099     247.05213   \n",
            "min            NaN    1000.000000    1000.000000       5.320000      14.77000   \n",
            "25%            NaN    8500.000000    8500.000000       9.170000     261.88000   \n",
            "50%            NaN   14000.000000   14000.000000      12.290000     383.81000   \n",
            "75%            NaN   20000.000000   20000.000000      14.650000     580.73000   \n",
            "max            NaN   35000.000000   35000.000000      28.990000    1445.46000   \n",
            "\n",
            "       emp_length home_ownership    annual_inc verification_status  \\\n",
            "count      187897         200000  2.000000e+05              200000   \n",
            "unique         11              4           NaN                   3   \n",
            "top     10+ years       MORTGAGE           NaN     Source Verified   \n",
            "freq        67516          99618           NaN               84756   \n",
            "mean          NaN            NaN  7.815081e+04                 NaN   \n",
            "std           NaN            NaN  8.051362e+04                 NaN   \n",
            "min           NaN            NaN  0.000000e+00                 NaN   \n",
            "25%           NaN            NaN  4.757550e+04                 NaN   \n",
            "50%           NaN            NaN  6.500000e+04                 NaN   \n",
            "75%           NaN            NaN  9.340000e+04                 NaN   \n",
            "max           NaN            NaN  9.000000e+06                 NaN   \n",
            "\n",
            "       loan_status            dti    delinq_2yrs  fico_range_low  \\\n",
            "count       200000  199998.000000  200000.000000   200000.000000   \n",
            "unique           7            NaN            NaN             NaN   \n",
            "top     Fully Paid            NaN            NaN             NaN   \n",
            "freq        140992            NaN            NaN             NaN   \n",
            "mean           NaN      19.164467       0.346435      694.601325   \n",
            "std            NaN       9.157581       0.915392       30.768916   \n",
            "min            NaN       0.000000       0.000000      660.000000   \n",
            "25%            NaN      12.540000       0.000000      670.000000   \n",
            "50%            NaN      18.610000       0.000000      685.000000   \n",
            "75%            NaN      25.410000       0.000000      710.000000   \n",
            "max            NaN     999.000000      30.000000      845.000000   \n",
            "\n",
            "        fico_range_high  inq_last_6mths       open_acc        pub_rec  \\\n",
            "count      200000.00000   200000.000000  200000.000000  200000.000000   \n",
            "unique              NaN             NaN            NaN            NaN   \n",
            "top                 NaN             NaN            NaN            NaN   \n",
            "freq                NaN             NaN            NaN            NaN   \n",
            "mean          698.60144        0.571270      11.964525       0.232955   \n",
            "std            30.76948        0.865999       5.672638       0.665619   \n",
            "min           664.00000        0.000000       1.000000       0.000000   \n",
            "25%           674.00000        0.000000       8.000000       0.000000   \n",
            "50%           689.00000        0.000000      11.000000       0.000000   \n",
            "75%           714.00000        1.000000      15.000000       0.000000   \n",
            "max           850.00000        5.000000      82.000000      86.000000   \n",
            "\n",
            "           revol_bal      total_acc  \n",
            "count   2.000000e+05  200000.000000  \n",
            "unique           NaN            NaN  \n",
            "top              NaN            NaN  \n",
            "freq             NaN            NaN  \n",
            "mean    1.798365e+04      25.326880  \n",
            "std     2.471839e+04      12.080225  \n",
            "min     0.000000e+00       4.000000  \n",
            "25%     6.500000e+03      17.000000  \n",
            "50%     1.202200e+04      24.000000  \n",
            "75%     2.158725e+04      32.000000  \n",
            "max     1.630818e+06     169.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_cleaned.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VSQ2YSKm61GO",
        "outputId": "ab1b5ab7-9455-42ef-ef4b-12e9719294ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['id', 'loan_amnt', 'funded_amnt', 'int_rate', 'installment',\n",
            "       'emp_length', 'home_ownership', 'annual_inc', 'verification_status',\n",
            "       'loan_status', 'dti', 'delinq_2yrs', 'fico_range_low',\n",
            "       'fico_range_high', 'inq_last_6mths', 'open_acc', 'pub_rec', 'revol_bal',\n",
            "       'total_acc'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.isnull().sum()\n",
        "#df_cleaned.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "id": "kWeAwLtdCOgA",
        "outputId": "40a4de07-5eec-4340-f4f8-e1de981ec781"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                         0\n",
              "loan_amnt                  0\n",
              "funded_amnt                0\n",
              "int_rate                   0\n",
              "installment                0\n",
              "emp_length             12103\n",
              "home_ownership             0\n",
              "annual_inc                 0\n",
              "verification_status        0\n",
              "loan_status                0\n",
              "dti                        2\n",
              "delinq_2yrs                0\n",
              "fico_range_low             0\n",
              "fico_range_high            0\n",
              "inq_last_6mths             0\n",
              "open_acc                   0\n",
              "pub_rec                    0\n",
              "revol_bal                  0\n",
              "total_acc                  0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loan_amnt</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>funded_amnt</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>int_rate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>installment</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>emp_length</th>\n",
              "      <td>12103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home_ownership</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>annual_inc</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>verification_status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loan_status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dti</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fico_range_low</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fico_range_high</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>inq_last_6mths</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>open_acc</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pub_rec</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>revol_bal</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_acc</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.count()"
      ],
      "metadata": {
        "id": "dSsDnWtdFC7R",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "outputId": "042c5060-0c93-4bd9-8371-aaf9d2584bd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                     200000\n",
              "loan_amnt              200000\n",
              "funded_amnt            200000\n",
              "int_rate               200000\n",
              "installment            200000\n",
              "emp_length             187897\n",
              "home_ownership         200000\n",
              "annual_inc             200000\n",
              "verification_status    200000\n",
              "loan_status            200000\n",
              "dti                    199998\n",
              "delinq_2yrs            200000\n",
              "fico_range_low         200000\n",
              "fico_range_high        200000\n",
              "inq_last_6mths         200000\n",
              "open_acc               200000\n",
              "pub_rec                200000\n",
              "revol_bal              200000\n",
              "total_acc              200000\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loan_amnt</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>funded_amnt</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>int_rate</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>installment</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>emp_length</th>\n",
              "      <td>187897</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home_ownership</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>annual_inc</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>verification_status</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loan_status</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dti</th>\n",
              "      <td>199998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fico_range_low</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fico_range_high</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>inq_last_6mths</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>open_acc</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pub_rec</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>revol_bal</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_acc</th>\n",
              "      <td>200000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.to_csv('/content/drive/My Drive/cleaned_data.csv', index=False)"
      ],
      "metadata": {
        "id": "OkPCZCqOAF3b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "file_path = \"/content/drive/My Drive/cleaned_data.csv\"\n",
        "df_2 = pd.read_csv(file_path)\n",
        "\n",
        "#df.count()\n",
        "\n",
        "df_2.isnull().sum()"
      ],
      "metadata": {
        "id": "9KgJyClkBCZo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "outputId": "09f2a914-1bab-4009-f391-ddca3f7e70e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                         0\n",
              "loan_amnt                  0\n",
              "funded_amnt                0\n",
              "int_rate                   0\n",
              "installment                0\n",
              "emp_length             12103\n",
              "home_ownership             0\n",
              "annual_inc                 0\n",
              "verification_status        0\n",
              "loan_status                0\n",
              "dti                        2\n",
              "delinq_2yrs                0\n",
              "fico_range_low             0\n",
              "fico_range_high            0\n",
              "inq_last_6mths             0\n",
              "open_acc                   0\n",
              "pub_rec                    0\n",
              "revol_bal                  0\n",
              "total_acc                  0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loan_amnt</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>funded_amnt</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>int_rate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>installment</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>emp_length</th>\n",
              "      <td>12103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home_ownership</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>annual_inc</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>verification_status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loan_status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dti</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fico_range_low</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fico_range_high</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>inq_last_6mths</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>open_acc</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pub_rec</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>revol_bal</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_acc</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_2 = pd.get_dummies(df_2, columns=['home_ownership'], dtype=int)\n",
        "\n",
        "print(df_2.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "24UAjIxJM5wZ",
        "outputId": "75cd7005-c176-4b54-ca66-a55f067e25cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         id  loan_amnt  funded_amnt  int_rate  installment emp_length  \\\n",
            "0  68407277     3600.0       3600.0     13.99       123.03  10+ years   \n",
            "1  68355089    24700.0      24700.0     11.99       820.28  10+ years   \n",
            "2  68341763    20000.0      20000.0     10.78       432.66  10+ years   \n",
            "3  66310712    35000.0      35000.0     14.85       829.90  10+ years   \n",
            "4  68476807    10400.0      10400.0     22.45       289.91    3 years   \n",
            "\n",
            "   annual_inc verification_status loan_status    dti  ...  fico_range_high  \\\n",
            "0     55000.0        Not Verified  Fully Paid   5.91  ...            679.0   \n",
            "1     65000.0        Not Verified  Fully Paid  16.06  ...            719.0   \n",
            "2     63000.0        Not Verified  Fully Paid  10.78  ...            699.0   \n",
            "3    110000.0     Source Verified     Current  17.06  ...            789.0   \n",
            "4    104433.0     Source Verified  Fully Paid  25.37  ...            699.0   \n",
            "\n",
            "   inq_last_6mths  open_acc  pub_rec  revol_bal  total_acc  \\\n",
            "0             1.0       7.0      0.0     2765.0       13.0   \n",
            "1             4.0      22.0      0.0    21470.0       38.0   \n",
            "2             0.0       6.0      0.0     7869.0       18.0   \n",
            "3             0.0      13.0      0.0     7802.0       17.0   \n",
            "4             3.0      12.0      0.0    21929.0       35.0   \n",
            "\n",
            "   home_ownership_ANY  home_ownership_MORTGAGE  home_ownership_OWN  \\\n",
            "0                   0                        1                   0   \n",
            "1                   0                        1                   0   \n",
            "2                   0                        1                   0   \n",
            "3                   0                        1                   0   \n",
            "4                   0                        1                   0   \n",
            "\n",
            "   home_ownership_RENT  \n",
            "0                    0  \n",
            "1                    0  \n",
            "2                    0  \n",
            "3                    0  \n",
            "4                    0  \n",
            "\n",
            "[5 rows x 22 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def classify_loan_status(status):\n",
        "    if status in [\"Fully Paid\", \"Current\"]:\n",
        "        return 1  # Good Loan\n",
        "    elif status in [\"Charged Off\", \"Default\", \"Overdue\"]:\n",
        "        return 0  # Bad Loan\n",
        "\n",
        "df_2['loan_status_binary'] = df_2['loan_status'].apply(classify_loan_status)\n",
        "# We have removed the original columns loan_status and replaced with the new column name.\n",
        "df_2.drop(columns=['loan_status'], inplace=True)\n",
        "\n",
        "\n",
        "def clean_experience(value):\n",
        "    if pd.isna(value) or value == \"(Blanks)\":\n",
        "        return np.nan\n",
        "    elif '< 1 year' in str(value):\n",
        "        return 0.5  # Representing <1 year as 0.5\n",
        "    elif '10+' in str(value):\n",
        "        return 10.5  # Converting \"10+ years\" to 10.5\n",
        "    elif '10 years' in str(value):\n",
        "        return 10.0  # Keeping \"10 years\" as 10\n",
        "    elif 'year' in str(value):\n",
        "        return float(value.split()[0])\n",
        "    else:\n",
        "        return np.nan\n",
        "\n",
        "# Assuming df is your DataFrame with 'emp_length' column\n",
        "df_2['emp_length'] = df_2['emp_length'].apply(clean_experience)\n",
        "\n",
        "df_2.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "r4C06IfM577Q",
        "outputId": "270a1190-1c60-4300-ae73-6990255445bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         id  loan_amnt  funded_amnt  int_rate  installment  emp_length  \\\n",
              "0  68407277     3600.0       3600.0     13.99       123.03        10.5   \n",
              "1  68355089    24700.0      24700.0     11.99       820.28        10.5   \n",
              "2  68341763    20000.0      20000.0     10.78       432.66        10.5   \n",
              "3  66310712    35000.0      35000.0     14.85       829.90        10.5   \n",
              "4  68476807    10400.0      10400.0     22.45       289.91         3.0   \n",
              "\n",
              "   annual_inc verification_status    dti  delinq_2yrs  ...  inq_last_6mths  \\\n",
              "0     55000.0        Not Verified   5.91          0.0  ...             1.0   \n",
              "1     65000.0        Not Verified  16.06          1.0  ...             4.0   \n",
              "2     63000.0        Not Verified  10.78          0.0  ...             0.0   \n",
              "3    110000.0     Source Verified  17.06          0.0  ...             0.0   \n",
              "4    104433.0     Source Verified  25.37          1.0  ...             3.0   \n",
              "\n",
              "   open_acc  pub_rec  revol_bal  total_acc  home_ownership_ANY  \\\n",
              "0       7.0      0.0     2765.0       13.0                   0   \n",
              "1      22.0      0.0    21470.0       38.0                   0   \n",
              "2       6.0      0.0     7869.0       18.0                   0   \n",
              "3      13.0      0.0     7802.0       17.0                   0   \n",
              "4      12.0      0.0    21929.0       35.0                   0   \n",
              "\n",
              "   home_ownership_MORTGAGE  home_ownership_OWN  home_ownership_RENT  \\\n",
              "0                        1                   0                    0   \n",
              "1                        1                   0                    0   \n",
              "2                        1                   0                    0   \n",
              "3                        1                   0                    0   \n",
              "4                        1                   0                    0   \n",
              "\n",
              "   loan_status_binary  \n",
              "0                 1.0  \n",
              "1                 1.0  \n",
              "2                 1.0  \n",
              "3                 1.0  \n",
              "4                 1.0  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-130f0aba-41fb-49ad-82a0-860d08fe8150\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>loan_amnt</th>\n",
              "      <th>funded_amnt</th>\n",
              "      <th>int_rate</th>\n",
              "      <th>installment</th>\n",
              "      <th>emp_length</th>\n",
              "      <th>annual_inc</th>\n",
              "      <th>verification_status</th>\n",
              "      <th>dti</th>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <th>...</th>\n",
              "      <th>inq_last_6mths</th>\n",
              "      <th>open_acc</th>\n",
              "      <th>pub_rec</th>\n",
              "      <th>revol_bal</th>\n",
              "      <th>total_acc</th>\n",
              "      <th>home_ownership_ANY</th>\n",
              "      <th>home_ownership_MORTGAGE</th>\n",
              "      <th>home_ownership_OWN</th>\n",
              "      <th>home_ownership_RENT</th>\n",
              "      <th>loan_status_binary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>68407277</td>\n",
              "      <td>3600.0</td>\n",
              "      <td>3600.0</td>\n",
              "      <td>13.99</td>\n",
              "      <td>123.03</td>\n",
              "      <td>10.5</td>\n",
              "      <td>55000.0</td>\n",
              "      <td>Not Verified</td>\n",
              "      <td>5.91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2765.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>68355089</td>\n",
              "      <td>24700.0</td>\n",
              "      <td>24700.0</td>\n",
              "      <td>11.99</td>\n",
              "      <td>820.28</td>\n",
              "      <td>10.5</td>\n",
              "      <td>65000.0</td>\n",
              "      <td>Not Verified</td>\n",
              "      <td>16.06</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>4.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>21470.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>68341763</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>10.78</td>\n",
              "      <td>432.66</td>\n",
              "      <td>10.5</td>\n",
              "      <td>63000.0</td>\n",
              "      <td>Not Verified</td>\n",
              "      <td>10.78</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7869.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>66310712</td>\n",
              "      <td>35000.0</td>\n",
              "      <td>35000.0</td>\n",
              "      <td>14.85</td>\n",
              "      <td>829.90</td>\n",
              "      <td>10.5</td>\n",
              "      <td>110000.0</td>\n",
              "      <td>Source Verified</td>\n",
              "      <td>17.06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7802.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>68476807</td>\n",
              "      <td>10400.0</td>\n",
              "      <td>10400.0</td>\n",
              "      <td>22.45</td>\n",
              "      <td>289.91</td>\n",
              "      <td>3.0</td>\n",
              "      <td>104433.0</td>\n",
              "      <td>Source Verified</td>\n",
              "      <td>25.37</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>21929.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-130f0aba-41fb-49ad-82a0-860d08fe8150')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-130f0aba-41fb-49ad-82a0-860d08fe8150 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-130f0aba-41fb-49ad-82a0-860d08fe8150');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1ab96f6a-85b8-4737-a8da-481335b5f031\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1ab96f6a-85b8-4737-a8da-481335b5f031')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1ab96f6a-85b8-4737-a8da-481335b5f031 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_2"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_2['verification_status_encoded'] = df_2['verification_status'].map({\n",
        "    'Verified': 0,\n",
        "    'Source Verified': 1,\n",
        "    'Not Verified': -1\n",
        "})\n",
        "\n",
        "df_2.drop(columns=['verification_status'], inplace=True)\n",
        "df_2.head()"
      ],
      "metadata": {
        "id": "L5WV86OrL3Oh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "outputId": "ef700583-3ffe-4183-eea2-6d5665f2315f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         id  loan_amnt  funded_amnt  int_rate  installment  emp_length  \\\n",
              "0  68407277     3600.0       3600.0     13.99       123.03        10.5   \n",
              "1  68355089    24700.0      24700.0     11.99       820.28        10.5   \n",
              "2  68341763    20000.0      20000.0     10.78       432.66        10.5   \n",
              "3  66310712    35000.0      35000.0     14.85       829.90        10.5   \n",
              "4  68476807    10400.0      10400.0     22.45       289.91         3.0   \n",
              "\n",
              "   annual_inc    dti  delinq_2yrs  fico_range_low  ...  open_acc  pub_rec  \\\n",
              "0     55000.0   5.91          0.0           675.0  ...       7.0      0.0   \n",
              "1     65000.0  16.06          1.0           715.0  ...      22.0      0.0   \n",
              "2     63000.0  10.78          0.0           695.0  ...       6.0      0.0   \n",
              "3    110000.0  17.06          0.0           785.0  ...      13.0      0.0   \n",
              "4    104433.0  25.37          1.0           695.0  ...      12.0      0.0   \n",
              "\n",
              "   revol_bal  total_acc  home_ownership_ANY  home_ownership_MORTGAGE  \\\n",
              "0     2765.0       13.0                   0                        1   \n",
              "1    21470.0       38.0                   0                        1   \n",
              "2     7869.0       18.0                   0                        1   \n",
              "3     7802.0       17.0                   0                        1   \n",
              "4    21929.0       35.0                   0                        1   \n",
              "\n",
              "   home_ownership_OWN  home_ownership_RENT  loan_status_binary  \\\n",
              "0                   0                    0                 1.0   \n",
              "1                   0                    0                 1.0   \n",
              "2                   0                    0                 1.0   \n",
              "3                   0                    0                 1.0   \n",
              "4                   0                    0                 1.0   \n",
              "\n",
              "   verification_status_encoded  \n",
              "0                           -1  \n",
              "1                           -1  \n",
              "2                           -1  \n",
              "3                            1  \n",
              "4                            1  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9108236-aa58-400c-b373-fa24bb039fbf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>loan_amnt</th>\n",
              "      <th>funded_amnt</th>\n",
              "      <th>int_rate</th>\n",
              "      <th>installment</th>\n",
              "      <th>emp_length</th>\n",
              "      <th>annual_inc</th>\n",
              "      <th>dti</th>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <th>fico_range_low</th>\n",
              "      <th>...</th>\n",
              "      <th>open_acc</th>\n",
              "      <th>pub_rec</th>\n",
              "      <th>revol_bal</th>\n",
              "      <th>total_acc</th>\n",
              "      <th>home_ownership_ANY</th>\n",
              "      <th>home_ownership_MORTGAGE</th>\n",
              "      <th>home_ownership_OWN</th>\n",
              "      <th>home_ownership_RENT</th>\n",
              "      <th>loan_status_binary</th>\n",
              "      <th>verification_status_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>68407277</td>\n",
              "      <td>3600.0</td>\n",
              "      <td>3600.0</td>\n",
              "      <td>13.99</td>\n",
              "      <td>123.03</td>\n",
              "      <td>10.5</td>\n",
              "      <td>55000.0</td>\n",
              "      <td>5.91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>675.0</td>\n",
              "      <td>...</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2765.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>68355089</td>\n",
              "      <td>24700.0</td>\n",
              "      <td>24700.0</td>\n",
              "      <td>11.99</td>\n",
              "      <td>820.28</td>\n",
              "      <td>10.5</td>\n",
              "      <td>65000.0</td>\n",
              "      <td>16.06</td>\n",
              "      <td>1.0</td>\n",
              "      <td>715.0</td>\n",
              "      <td>...</td>\n",
              "      <td>22.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>21470.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>68341763</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>10.78</td>\n",
              "      <td>432.66</td>\n",
              "      <td>10.5</td>\n",
              "      <td>63000.0</td>\n",
              "      <td>10.78</td>\n",
              "      <td>0.0</td>\n",
              "      <td>695.0</td>\n",
              "      <td>...</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7869.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>66310712</td>\n",
              "      <td>35000.0</td>\n",
              "      <td>35000.0</td>\n",
              "      <td>14.85</td>\n",
              "      <td>829.90</td>\n",
              "      <td>10.5</td>\n",
              "      <td>110000.0</td>\n",
              "      <td>17.06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>785.0</td>\n",
              "      <td>...</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7802.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>68476807</td>\n",
              "      <td>10400.0</td>\n",
              "      <td>10400.0</td>\n",
              "      <td>22.45</td>\n",
              "      <td>289.91</td>\n",
              "      <td>3.0</td>\n",
              "      <td>104433.0</td>\n",
              "      <td>25.37</td>\n",
              "      <td>1.0</td>\n",
              "      <td>695.0</td>\n",
              "      <td>...</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>21929.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9108236-aa58-400c-b373-fa24bb039fbf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9108236-aa58-400c-b373-fa24bb039fbf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9108236-aa58-400c-b373-fa24bb039fbf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b77fe1c6-baba-48a4-826b-659f0bdc43cc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b77fe1c6-baba-48a4-826b-659f0bdc43cc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b77fe1c6-baba-48a4-826b-659f0bdc43cc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_2"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_2.to_csv('final_cleaned.csv', index=False)\n",
        "\n",
        "\n",
        "files.download('final_cleaned.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "vzVCYeB9Qvur",
        "outputId": "5bef3e91-7ef4-481e-ead5-740be328f5b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_e1790b28-c64c-42db-b0bc-64aab686dd12\", \"final_cleaned.csv\", 22090061)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the cleaned dataset\n",
        "df_3 = pd.read_csv(\"/content/final_cleaned.csv\")\n",
        "df_3 = df_3[df_3['loan_status_binary'] != -1]\n",
        "\n",
        "# Create a new column 'fico_avg' by taking the mean of FICO range columns\n",
        "df_3['fico_avg'] = (df_3['fico_range_low'] + df_3['fico_range_high']) / 2\n",
        "\n",
        "# Remove the original FICO range columns since we've created the average\n",
        "df_3.drop(['fico_range_low', 'fico_range_high'], axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "EWsTweC543j4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# FICO Average Score Distribution\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(df_3['fico_avg'], bins=30, kde=True)\n",
        "plt.title('FICO Average Score Distribution')\n",
        "plt.xlabel('FICO Average Score')\n",
        "plt.ylabel('Frequency')\n",
        "plt.grid(True, linestyle='--', alpha=0.6)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "dQBZQyPbXcK1",
        "outputId": "462692da-622a-4cb7-b14f-6811a6f885cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Separate the features and the target variable\n",
        "X = df_3.drop(columns=['loan_status_binary']) # Input variables\n",
        "y = df_3['loan_status_binary']  # Target labels\n",
        "\n",
        "# Split the data into training and testing subsets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "7gv66HCORafb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter the DataFrame to include only rows where 'loan_status_binary' is 0 or 1\n",
        "filtered_df = df_3[df_3['loan_status_binary'].isin([0, 1])]\n",
        "\n",
        "# Plot the class distribution of the filtered data\n",
        "sns.countplot(x=filtered_df['loan_status_binary'])\n",
        "plt.title('Class Distribution (0 and 1 only)')\n",
        "plt.xlabel('Loan Status Binary')\n",
        "plt.ylabel('Count')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "dtMnqEQJe4pJ",
        "outputId": "a98accfc-e54f-4466-88eb-2621260ebb96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define evaluation function\n",
        "def evaluate_model(model, X_train_resampled, y_train_resampled, model_name):\n",
        "    model.fit(X_train_resampled, y_train_resampled)\n",
        "    predictions = model.predict(X_test)\n",
        "    accuracy = accuracy_score(y_test, predictions)\n",
        "    print(f\"\\nResults for {model_name}:\")\n",
        "    print(f\"Accuracy: {accuracy:.4f}\")\n",
        "    print(classification_report(y_test, predictions))\n",
        "    if \"SMOTE\" in model_name and \"Random Forest\" in model_name:\n",
        "      visualizeClassificationReport(y_train_resampled)"
      ],
      "metadata": {
        "id": "O3Yf2NxDGQvI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Balancing strategies\n",
        "sampling_methods = {\n",
        "    \"SMOTE\": SMOTE(random_state=42),\n",
        "    \"ADASYN\": ADASYN(random_state=42),\n",
        "    \"Random Undersampling\": RandomUnderSampler(random_state=42)\n",
        "}"
      ],
      "metadata": {
        "id": "TZXf2zwuGS2g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Visualize code part\n",
        "def visualizeClassificationReport(y_train_resampled):\n",
        "  print(\"Visualize class distribution after SMOTE\")\n",
        "  sns.countplot(x=y_train_resampled)\n",
        "  plt.title('Class Distribution After SMOTE')\n",
        "  plt.xlabel('Loan Status Binary')\n",
        "  plt.ylabel('Count')\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "1TqK5fVWaIOt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Random Forest Classifier with balancing methods\n",
        "import seaborn as sns\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "\n",
        "for method_name, sampler in sampling_methods.items():\n",
        "    print(f\"\\nBalancing using: {method_name}\")\n",
        "    X_resampled, y_resampled = sampler.fit_resample(X_train, y_train)\n",
        "    rf_model = RandomForestClassifier(random_state=42)\n",
        "    evaluate_model(rf_model, X_resampled, y_resampled, f\"Random Forest ({method_name})\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Q_rOnJiQGXmo",
        "outputId": "451440b1-906b-4df4-e5b8-0a76f69aaa27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Balancing using: SMOTE\n",
            "\n",
            "Results for Random Forest (SMOTE):\n",
            "Accuracy: 0.7961\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.33      0.17      0.22      1236\n",
            "           1       0.84      0.93      0.88      5889\n",
            "\n",
            "    accuracy                           0.80      7125\n",
            "   macro avg       0.58      0.55      0.55      7125\n",
            "weighted avg       0.75      0.80      0.77      7125\n",
            "\n",
            "Visualize class distribution after SMOTE\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Balancing using: ADASYN\n",
            "\n",
            "Results for Random Forest (ADASYN):\n",
            "Accuracy: 0.7920\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.31      0.17      0.22      1236\n",
            "           1       0.84      0.92      0.88      5889\n",
            "\n",
            "    accuracy                           0.79      7125\n",
            "   macro avg       0.58      0.55      0.55      7125\n",
            "weighted avg       0.75      0.79      0.77      7125\n",
            "\n",
            "\n",
            "Balancing using: Random Undersampling\n",
            "\n",
            "Results for Random Forest (Random Undersampling):\n",
            "Accuracy: 0.6152\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.26      0.67      0.37      1236\n",
            "           1       0.90      0.60      0.72      5889\n",
            "\n",
            "    accuracy                           0.62      7125\n",
            "   macro avg       0.58      0.63      0.55      7125\n",
            "weighted avg       0.79      0.62      0.66      7125\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Logistic Regression Classifier with balancing methods\n",
        "for method_name, sampler in sampling_methods.items():\n",
        "    print(f\"\\nBalancing using: {method_name}\")\n",
        "    X_resampled, y_resampled = sampler.fit_resample(X_train, y_train)\n",
        "    lr_model = LogisticRegression(random_state=42, max_iter=5000)\n",
        "    evaluate_model(lr_model, X_resampled, y_resampled, f\"Logistic Regression ({method_name})\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NiLLwRTPGbd_",
        "outputId": "5db5368c-fc28-4c6f-8392-31114d260cff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Balancing using: SMOTE\n",
            "\n",
            "Results for Logistic Regression (SMOTE):\n",
            "Accuracy: 0.6834\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.27      0.50      0.35      1236\n",
            "           1       0.87      0.72      0.79      5889\n",
            "\n",
            "    accuracy                           0.68      7125\n",
            "   macro avg       0.57      0.61      0.57      7125\n",
            "weighted avg       0.77      0.68      0.71      7125\n",
            "\n",
            "\n",
            "Balancing using: ADASYN\n",
            "\n",
            "Results for Logistic Regression (ADASYN):\n",
            "Accuracy: 0.7182\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.29      0.45      0.36      1236\n",
            "           1       0.87      0.78      0.82      5889\n",
            "\n",
            "    accuracy                           0.72      7125\n",
            "   macro avg       0.58      0.61      0.59      7125\n",
            "weighted avg       0.77      0.72      0.74      7125\n",
            "\n",
            "\n",
            "Balancing using: Random Undersampling\n",
            "\n",
            "Results for Logistic Regression (Random Undersampling):\n",
            "Accuracy: 0.6543\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.28      0.62      0.39      1236\n",
            "           1       0.89      0.66      0.76      5889\n",
            "\n",
            "    accuracy                           0.65      7125\n",
            "   macro avg       0.59      0.64      0.57      7125\n",
            "weighted avg       0.79      0.65      0.69      7125\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# XGBoost Classifier with balancing methods\n",
        "for method_name, sampler in sampling_methods.items():\n",
        "    print(f\"\\nBalancing using: {method_name}\")\n",
        "    X_resampled, y_resampled = sampler.fit_resample(X_train, y_train)\n",
        "    xgb_model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss')\n",
        "    evaluate_model(xgb_model, X_resampled, y_resampled, f\"XGBoost ({method_name})\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I0d18bvmGeow",
        "outputId": "4953dd64-1ba1-4fa2-e81f-bd838f9f93b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Balancing using: SMOTE\n",
            "\n",
            "Results for XGBoost (SMOTE):\n",
            "Accuracy: 0.8160\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.39      0.11      0.18      1236\n",
            "           1       0.84      0.96      0.90      5889\n",
            "\n",
            "    accuracy                           0.82      7125\n",
            "   macro avg       0.62      0.54      0.54      7125\n",
            "weighted avg       0.76      0.82      0.77      7125\n",
            "\n",
            "\n",
            "Balancing using: ADASYN\n",
            "\n",
            "Results for XGBoost (ADASYN):\n",
            "Accuracy: 0.8160\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.39      0.11      0.18      1236\n",
            "           1       0.84      0.96      0.90      5889\n",
            "\n",
            "    accuracy                           0.82      7125\n",
            "   macro avg       0.62      0.54      0.54      7125\n",
            "weighted avg       0.76      0.82      0.77      7125\n",
            "\n",
            "\n",
            "Balancing using: Random Undersampling\n",
            "\n",
            "Results for XGBoost (Random Undersampling):\n",
            "Accuracy: 0.6072\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.25      0.62      0.36      1236\n",
            "           1       0.88      0.60      0.72      5889\n",
            "\n",
            "    accuracy                           0.61      7125\n",
            "   macro avg       0.57      0.61      0.54      7125\n",
            "weighted avg       0.77      0.61      0.65      7125\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gradient Boosting Classifier with balancing methods\n",
        "for method_name, sampler in sampling_methods.items():\n",
        "    print(f\"\\nBalancing using: {method_name}\")\n",
        "    X_resampled, y_resampled = sampler.fit_resample(X_train, y_train)\n",
        "    gb_model = GradientBoostingClassifier(random_state=42)\n",
        "    evaluate_model(gb_model, X_resampled, y_resampled, f\"Gradient Boosting ({method_name})\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QPzY-jaAGhxB",
        "outputId": "343fa3b7-720e-42aa-d939-4b3778a33459"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Balancing using: SMOTE\n",
            "\n",
            "Results for Gradient Boosting (SMOTE):\n",
            "Accuracy: 0.7968\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.34      0.18      0.24      1236\n",
            "           1       0.84      0.93      0.88      5889\n",
            "\n",
            "    accuracy                           0.80      7125\n",
            "   macro avg       0.59      0.55      0.56      7125\n",
            "weighted avg       0.76      0.80      0.77      7125\n",
            "\n",
            "\n",
            "Balancing using: ADASYN\n",
            "\n",
            "Results for Gradient Boosting (ADASYN):\n",
            "Accuracy: 0.7905\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.33      0.20      0.25      1236\n",
            "           1       0.84      0.91      0.88      5889\n",
            "\n",
            "    accuracy                           0.79      7125\n",
            "   macro avg       0.59      0.56      0.56      7125\n",
            "weighted avg       0.75      0.79      0.77      7125\n",
            "\n",
            "\n",
            "Balancing using: Random Undersampling\n",
            "\n",
            "Results for Gradient Boosting (Random Undersampling):\n",
            "Accuracy: 0.6229\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.27      0.69      0.39      1236\n",
            "           1       0.90      0.61      0.73      5889\n",
            "\n",
            "    accuracy                           0.62      7125\n",
            "   macro avg       0.59      0.65      0.56      7125\n",
            "weighted avg       0.79      0.62      0.67      7125\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resample training data using ADASYN for fine-tuning phase\n",
        "adasyn_sampler = ADASYN(random_state=42)\n",
        "X_train_balanced, y_train_balanced = adasyn_sampler.fit_resample(X_train, y_train)\n"
      ],
      "metadata": {
        "id": "dDXDM8vQGkQq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fine-tuning Logistic Regression using Grid Search\n",
        "logistic_params = {\n",
        "    'penalty': ['l1', 'l2'],\n",
        "    'C': [0.01, 0.1, 1, 10],\n",
        "    'solver': ['liblinear', 'saga'],\n",
        "    'max_iter': [100, 200, 300]\n",
        "}\n",
        "\n",
        "logistic_grid = GridSearchCV(\n",
        "    estimator=LogisticRegression(random_state=42),\n",
        "    param_grid=logistic_params,\n",
        "    scoring='f1',\n",
        "    cv=5,\n",
        "    n_jobs=-1,\n",
        "    verbose=1\n",
        ")\n",
        "\n",
        "logistic_grid.fit(X_train_balanced, y_train_balanced)\n",
        "best_logistic = logistic_grid.best_estimator_\n",
        "\n",
        "# Evaluate the tuned model\n",
        "predictions = best_logistic.predict(X_test)\n",
        "print(\"Tuned Logistic Regression (ADASYN) Accuracy:\", accuracy_score(y_test, predictions))\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, predictions))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "05dIoF3kGlr0",
        "outputId": "9097f521-de6a-44ed-fcfc-be58627a79d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 48 candidates, totalling 240 fits\n",
            "Tuned Logistic Regression (ADASYN) Accuracy: 0.7685614035087719\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.34      0.36      0.35      1236\n",
            "           1       0.86      0.85      0.86      5889\n",
            "\n",
            "    accuracy                           0.77      7125\n",
            "   macro avg       0.60      0.61      0.60      7125\n",
            "weighted avg       0.77      0.77      0.77      7125\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fine-tuning XGBoost using Grid Search\n",
        "xgb_params = {\n",
        "    'n_estimators': [100],\n",
        "    'learning_rate': [0.1],\n",
        "    'max_depth': [3],\n",
        "    'min_child_weight': [1],\n",
        "    'subsample': [0.8],\n",
        "    'colsample_bytree': [0.8]\n",
        "}\n",
        "\n",
        "xgb_grid = GridSearchCV(\n",
        "    estimator=XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss'),\n",
        "    param_grid=xgb_params,\n",
        "    scoring='f1',\n",
        "    cv=5,\n",
        "    n_jobs=-1\n",
        ")\n",
        "\n",
        "xgb_grid.fit(X_train_balanced, y_train_balanced)\n",
        "best_xgb = xgb_grid.best_estimator_\n",
        "\n",
        "# Evaluate the tuned XGBoost\n",
        "evaluate_model(best_xgb, X_train, y_train, \"Fine-Tuned XGBoost (ADASYN)\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TDgtxvejGqHP",
        "outputId": "24585aab-69a3-4524-c8bc-63cc75917fe4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Results for Fine-Tuned XGBoost (ADASYN):\n",
            "Accuracy: 0.8291\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.61      0.04      0.08      1236\n",
            "           1       0.83      0.99      0.91      5889\n",
            "\n",
            "    accuracy                           0.83      7125\n",
            "   macro avg       0.72      0.52      0.49      7125\n",
            "weighted avg       0.79      0.83      0.76      7125\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fine-tuning Gradient Boosting using Grid Search\n",
        "gb_params = {\n",
        "    'n_estimators': [100, 150],\n",
        "    'learning_rate': [0.05, 0.1],\n",
        "    'max_depth': [3, 4],\n",
        "    'subsample': [0.8],\n",
        "    'min_samples_split': [2, 5]\n",
        "}\n",
        "\n",
        "gb_grid = GridSearchCV(\n",
        "    estimator=GradientBoostingClassifier(random_state=42),\n",
        "    param_grid=gb_params,\n",
        "    scoring='f1',\n",
        "    cv=5,\n",
        "    n_jobs=-1\n",
        ")\n",
        "\n",
        "gb_grid.fit(X_train_balanced, y_train_balanced)\n",
        "best_gb = gb_grid.best_estimator_\n",
        "\n",
        "# Evaluate the tuned Gradient Boosting\n",
        "evaluate_model(best_gb, X_train, y_train, \"Fine-Tuned Gradient Boosting (ADASYN)\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "41kCKW8NGtrt",
        "outputId": "ba4c1b44-e4dd-4416-cb4b-8c88c1c77be2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Results for Fine-Tuned Gradient Boosting (ADASYN):\n",
            "Accuracy: 0.8258\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.48      0.06      0.10      1236\n",
            "           1       0.83      0.99      0.90      5889\n",
            "\n",
            "    accuracy                           0.83      7125\n",
            "   macro avg       0.66      0.52      0.50      7125\n",
            "weighted avg       0.77      0.83      0.76      7125\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gfnbbqnQO0Rz"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
